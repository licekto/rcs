[user]
name = Tomas Licek
email = licekto@gmail.com

[core]
excludesfile = ~/.rcs/gitignore

[color]
ui = auto

[color "branch"]
current = yellow reverse
local = yellow
remote = green

[color "diff"]
meta = yellow bold
frag = magenta bold
old = red bold
new = green bold

[color "status"]
added = yellow
changed = green
untracked = cyan

[alias]
    acp = "!f() { \
            if [ -z \"$1\" ] ; then \
                echo \"Commit message must not by empty\"; \
                exit 1; \
            fi; \
            CHANGES=$(git diff --exit-code && git ls-files . --others); \
            if [ -z \"$CHANGES\" ] ; then \
                echo \"No changes to commit\"; \
                exit 1; \
            fi; \
            git add . && git commit -m \"$1\" && git pu; \
           }; f"
    amd = commit -a --amend --no-edit
    as = !git add . && git status
    b = checkout -b
    ba = for-each-ref --format=' %(authorname) %09 %(refname)' --sort=authorname
    blrm = branch -D
    brrm = push origin --delete
    c = commit -m
    ch = checkout .
    # Keep in mind that this works only against master.
    # If your branch was brached off from a branch that
    # was branched off from master, then this gives the
    # number of commits from master.
    cc = !git rev-list --count HEAD ^master
    ch = checkout .
    chm = checkout master
    d = !git diff && git diff --staged && git diff --check
    ds = !git diff && git diff --staged && git diff --check && git status
    f = !git commit --fixup=`git rev-parse HEAD`
    k = !gitk --all
    l = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short --numstat
    la = "!git config -l | grep alias | cut -c 7-"
    last = show --summary
    myb = "!f() { \
            git for-each-ref --sort=authorname --format \"%(authorname) %(refname)\" \
            | grep \"$(git config user.name)\" \
            | cut -d' ' -f 1,8 \
            | sed 's/,/:/g' \
            | sed 's/refs\\/remotes\\/origin\\///g' \
            | sed 's/refs\\/heads\\///g' \
            | sort | uniq; \
            }; f"
    p = push
    pu = !git push -u origin `git rev-parse --abbrev-ref HEAD`
    r = remote -v
    rbm = "!f() { \
            CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD); \
            echo $CURRENT_BRANCH; \
            git chm && git u && git checkout $CURRENT_BRANCH && git rebase master && g pu -f; \
            }; f"
    ri = !git rebase --interactive HEAD~`git cc`
    ria = !git rebase --interactive --autosquash HEAD~`git cc`
    rmf = clean -f
    rmcheck = clean -n
    s = status
    # list branches sorted by last modified
    sortb = "!git for-each-ref --sort='-authordate' --format='%(authordate)%09%(objectname:short)%09%(refname)' refs/heads | sed -e 's-refs/heads/--'"
    su = submodule update
    u = !git pull && git submodule update
    unstage = reset HEAD

[gc]
    auto = 0

[filter "lfs"]
    process = git-lfs filter-process
    required = true
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
